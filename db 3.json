{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/vexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/qrious.js","path":"js/qrious.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/catalog.png","path":"css/images/catalog.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/alipay.jpg","path":"css/images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/escheres.png","path":"css/images/escheres.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/menu.png","path":"css/images/menu.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/top.png","path":"css/images/top.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/wechat.jpg","path":"css/images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/plugins/gitment.css","path":"css/plugins/gitment.css","modified":0,"renderable":1},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","path":"fonts/SourceSansPro.ttf","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1587194775379},{"_id":"themes/vexo/LICENSE","hash":"3e135cd69c0e02c0a49dd43d571f600223cc61d1","modified":1587188032547},{"_id":"themes/vexo/.travis.yml","hash":"cc482f06f4ea6962058f2548dcb814b954876e76","modified":1587188032547},{"_id":"themes/vexo/README.md","hash":"036ddc66e868b93411a15ed3fd5ed5e9101045a5","modified":1587188032548},{"_id":"themes/vexo/lint.sh","hash":"f580302e4aa9ccfb95a253851da6501d145613fe","modified":1587188032552},{"_id":"themes/vexo/package.json","hash":"8852c5a394ac59d219e5bbbcee10d573d33e1fc6","modified":1587188032552},{"_id":"themes/vexo/_config.yml","hash":"05b753048eaab1d4fed22ee05f42756fb2b49d9d","modified":1587192294657},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1587195459908},{"_id":"source/_posts/博客平台对比-想写博客该选用那个平台呢？.md","hash":"e14d5669bdd68e1ba6eda2b0d90fda2ca54a325a","modified":1587269034759},{"_id":"source/_posts/折腾了半下午搞定了hexo，记录一下.md","hash":"bb4828c20a5aab4a5dcad14d5b9d67d46d92280f","modified":1587276689327},{"_id":"source/_posts/Vue-滚动条滚动到最下方时更新.md","hash":"10ea2c7b230aa1ef37dcee49cad9304adc1f8570","modified":1587269039632},{"_id":"source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1587188077259},{"_id":"source/_posts/Vue-父组件如何更新子组件的参数.md","hash":"dbe8502e88d35a988e33439aa972f7102deee2e6","modified":1587210988038},{"_id":"source/_posts/后端-Git学习分享.md","hash":"530dc4cc2f844cc23d627eff56c539bedb5f54b0","modified":1587210951705},{"_id":"source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1587188077260},{"_id":"source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1587188077259},{"_id":"themes/vexo/layout/about.ejs","hash":"76ba7418788eb2bb9ba46844f4d750734847d0b4","modified":1587188032550},{"_id":"themes/vexo/layout/archive.ejs","hash":"cb12abb19cb70e90d410a6233933eedb3f2c033a","modified":1587188032551},{"_id":"themes/vexo/layout/project.ejs","hash":"666be5c72bac8165e0946428642b36dd3232983e","modified":1587188032551},{"_id":"themes/vexo/layout/page.ejs","hash":"bc8958c120fb8569958164efb5e9dc278e2b4295","modified":1587188032551},{"_id":"themes/vexo/layout/layout.ejs","hash":"a7b8f1debdca12d667ecd1bcc3d4bc6e13a23d7b","modified":1587188032551},{"_id":"themes/vexo/layout/index.ejs","hash":"9f12f5928d68d4d68175b825e18f89f3b0dfdb69","modified":1587188032551},{"_id":"themes/vexo/layout/tags.ejs","hash":"5b326e2bd3292b3015d0666b796544d7126acfda","modified":1587188032552},{"_id":"themes/vexo/layout/_partial/archive.ejs","hash":"9abbf14034d581569c0b6c992fe22035cb5306b3","modified":1587188032549},{"_id":"themes/vexo/_source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1587188032548},{"_id":"themes/vexo/_source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1587188032548},{"_id":"themes/vexo/_source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1587188032548},{"_id":"themes/vexo/layout/_partial/footer.ejs","hash":"29db4b0211c6a9143c4d35bedd19498b02a3ceb1","modified":1587188032549},{"_id":"themes/vexo/layout/_partial/header.ejs","hash":"e544f516b23bc609cc6367190f380c879b935c21","modified":1587188032549},{"_id":"themes/vexo/layout/_partial/catalog.ejs","hash":"0352ce39c28074dcfc3bd6416680195eeb384fd1","modified":1587188032549},{"_id":"themes/vexo/layout/_partial/head.ejs","hash":"1771666a939af7f3b7785cec5abbc9dc2f4f725f","modified":1587188032549},{"_id":"themes/vexo/layout/_partial/nav.ejs","hash":"3d8ddc1f6e135a240d40edd157cf37f5d0a12df6","modified":1587188032549},{"_id":"themes/vexo/layout/_partial/pager.ejs","hash":"3a1b9680fbfa3baa76933c7c17216996381ad241","modified":1587188032549},{"_id":"themes/vexo/layout/_partial/tag.ejs","hash":"5d2a2c3f8ca7000945ab426a0c6939421974b224","modified":1587188032550},{"_id":"themes/vexo/layout/_partial/top.ejs","hash":"f09dea486246a580213005b21d4b38810dd16fb3","modified":1587188032550},{"_id":"themes/vexo/layout/_third-party/google_analytics.ejs","hash":"d09107a4ee5753a2fbbdb16ddf79d23ff0618c19","modified":1587188032550},{"_id":"themes/vexo/layout/_third-party/mathjax.ejs","hash":"aa58f0cfe22e7151c1a0521bbfa5cbd76f6dcd9d","modified":1587188032550},{"_id":"themes/vexo/source/css/_config.styl","hash":"0c9c0e77d6b8813cb76494e8d757843aab9e117b","modified":1587188032552},{"_id":"themes/vexo/source/css/style.styl","hash":"c09ad049c647cc089eaf00aa59e5d5d2a7f782d4","modified":1587188032557},{"_id":"themes/vexo/source/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1587188032559},{"_id":"themes/vexo/source/js/script.js","hash":"19c6ac9c1d8220fa9ab2ec461c17eaae3bc962d7","modified":1587188032560},{"_id":"themes/vexo/source/css/_partial/about.styl","hash":"8a428687f74f33426bf0c7de3fdd1f7654c26587","modified":1587188032552},{"_id":"themes/vexo/source/css/_partial/archive.styl","hash":"e80ddf26f2af3523632afeabd57f81592537985a","modified":1587188032553},{"_id":"themes/vexo/source/css/_partial/footer.styl","hash":"970b6fd3d05834926c69724934b798dd5a1472e6","modified":1587188032553},{"_id":"themes/vexo/source/css/_partial/catalog.styl","hash":"cbf3f59d3c3162700eb9cbd4cf72c8470c170f81","modified":1587188032553},{"_id":"themes/vexo/source/css/_partial/markdown.styl","hash":"5cfd022169adda3e2a266034e7818c8ccd349212","modified":1587188032553},{"_id":"themes/vexo/source/css/_partial/header.styl","hash":"def3a6938d925c585a7da6256a6f2e90f3b7d61e","modified":1587188032553},{"_id":"themes/vexo/source/css/_partial/nav.styl","hash":"e92c010c5cd460e75c67083df8cdd0bf4d25cde4","modified":1587188032554},{"_id":"themes/vexo/source/css/_partial/pager.styl","hash":"888384c67429c7568aa38b5ebe5acae3cc4de367","modified":1587188032554},{"_id":"themes/vexo/source/css/_partial/project.styl","hash":"e9b6faadf4852bce3a4141cba0a102a7afb81e9f","modified":1587188032554},{"_id":"themes/vexo/source/css/_partial/tags.styl","hash":"5198a7f7c221341138ae5c65185e86b6e13e8e26","modified":1587188032554},{"_id":"themes/vexo/source/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1587188032555},{"_id":"themes/vexo/source/css/images/alipay.jpg","hash":"c49822ea6f06f868c2404fb00a93f913c8fff7b5","modified":1587188032555},{"_id":"themes/vexo/source/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1587188032555},{"_id":"themes/vexo/source/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1587188032555},{"_id":"themes/vexo/source/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1587188032555},{"_id":"themes/vexo/source/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1587188032556},{"_id":"themes/vexo/source/css/images/wechat.jpg","hash":"5bed6d3eb9f71b227b0ea0187c1a7ba8caf5ee64","modified":1587188032556},{"_id":"themes/vexo/source/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1587188032556},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1587188032558},{"_id":"themes/vexo/source/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1587188032559},{"_id":"public/atom.xml","hash":"139dbcded4b2925e4dd964eca0c18a1fb104e89c","modified":1587276735073},{"_id":"public/sitemap.xml","hash":"8c0310afa0e30dcafdd57d670f8818371c2344bb","modified":1587276735073},{"_id":"public/project/index.html","hash":"ecff9600a95d26b191ee946be7c00d504e009a7b","modified":1587276735073},{"_id":"public/tags/index.html","hash":"2c9bff12a1dac31698b9bf99b3302681d6e16c77","modified":1587276736350},{"_id":"public/about/index.html","hash":"fb8c28e7f6274c755d3872fce02835233e70d160","modified":1587276735073},{"_id":"public/2020/04/19/博客平台对比-想写博客该选用那个平台呢？/index.html","hash":"5bba90548b76eba8b5a59cbf1358f52214e77a7c","modified":1587276735073},{"_id":"public/2020/04/18/后端-Git学习分享/index.html","hash":"26c89f570d79f3b77061a1379686d001b0d1288a","modified":1587276735073},{"_id":"public/2020/04/18/Vue-滚动条滚动到最下方时更新/index.html","hash":"2a3764d499aa60ceb02674d87636f880a718586c","modified":1587276735073},{"_id":"public/2020/04/18/Vue-父组件如何更新子组件的参数/index.html","hash":"4263a2dab9217752adc70ab446b75397ed4b1c1d","modified":1587276735073},{"_id":"public/2020/04/18/折腾了半下午搞定了hexo，记录一下/index.html","hash":"5674bfc9709787ab1f4d83f739d222ca875d98be","modified":1587276735073},{"_id":"public/archives/index.html","hash":"173fd4ae894fab8a98c335e1d4a569129b99e48c","modified":1587276735073},{"_id":"public/index.html","hash":"2a788071b0c2c8e22992ec75e22dafceb9db9885","modified":1587276735073},{"_id":"public/tags/心情/index.html","hash":"28ad795f157bc82c61a2b46aff46f5c99bf996d9","modified":1587276735073},{"_id":"public/tags/Hexo/index.html","hash":"8464e5c8f37ac64ef124674a65bc48a980488450","modified":1587276735073},{"_id":"public/tags/GitHub-Page/index.html","hash":"c594268598f4ca2f78ceed1177832bf877619962","modified":1587276735073},{"_id":"public/tags/Typora/index.html","hash":"fc4222096cca72140e81ddaa0eddad6195d3ad28","modified":1587276735073},{"_id":"public/tags/Blog/index.html","hash":"363db86603dc33638fc7ff6fecb11d98b9ecdde9","modified":1587276735073},{"_id":"public/tags/Vue/index.html","hash":"d8e22c90bca91804735d8fc46d9ce8f4acc64ed5","modified":1587276735073},{"_id":"public/tags/Git/index.html","hash":"0151d2d78eef80bea1c06ef2fee5dc06d4727811","modified":1587276735073},{"_id":"public/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1587276735073},{"_id":"public/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1587276735073},{"_id":"public/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1587276735073},{"_id":"public/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1587276735073},{"_id":"public/css/images/alipay.jpg","hash":"c49822ea6f06f868c2404fb00a93f913c8fff7b5","modified":1587276735073},{"_id":"public/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1587276735073},{"_id":"public/css/images/wechat.jpg","hash":"5bed6d3eb9f71b227b0ea0187c1a7ba8caf5ee64","modified":1587276735073},{"_id":"public/js/script.js","hash":"19c6ac9c1d8220fa9ab2ec461c17eaae3bc962d7","modified":1587276735073},{"_id":"public/css/style.css","hash":"cdd939bf4eb1bfe0c10f786a07638945c09d86fc","modified":1587276735073},{"_id":"public/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1587276735073},{"_id":"public/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1587276735073},{"_id":"public/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1587276735073},{"_id":"public/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1587276735073}],"Category":[],"Data":[],"Page":[{"title":"Project","layout":"project","_content":"","source":"project/index.md","raw":"---\ntitle: Project\nlayout: project\n---\n","date":"2020-04-18T07:48:31.694Z","updated":"2020-04-18T05:34:37.259Z","path":"project/index.html","comments":1,"_id":"ck96nl3lt0001ba8c55dg2jnz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\n---\n","date":"2020-04-18T07:48:22.486Z","updated":"2020-04-18T05:34:37.260Z","path":"tags/index.html","comments":1,"_id":"ck96nl3mc000mba8chiaz7787","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: About\nlayout: about\n---","date":"2020-04-18T07:48:38.718Z","updated":"2020-04-18T05:34:37.259Z","path":"about/index.html","comments":1,"_id":"ck96nl3mc000nba8c265ahoit","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"折腾了半下午搞定了hexo，记录一下","date":"2020-04-18T09:29:35.000Z","_content":"\n## 搭建了自己的GitHub Page博客\n\n关键词：`Hexo` 、`GitHub Page`、`Typora`、`Blog`\n\n\n对于我的个人博客，我一直没有停下折腾的脚步，最早的博客是大二时搭在腾讯云学生服务器上，后面也尝试了CSDN，cnblog，简书，掘金等博客平台，下面是我做的一个简单地分析对比：\n\n## 博客平台简分析对比\n\n1. 几大平台中`CSDN`的SEO做的最好，访问量最多的能有7000+ [https://blog.csdn.net/Mr_Zhang..](https://blog.csdn.net/Mr_Zhang____)\n\n2. 在博客平台发布文章需要审核，审核时长不定，且有一定的几率会不过审，自己搭建的博客则无需审核机制。\n3. 自己搭的博客是发布在的自己的腾讯云云服务器上的，网址： [zhangnlei.cn](zhangnlei.cn)。博客服务需要自己发布，云服务器需要定期维护，对个人来说是需要不小的时间成本和金钱投入。（我的博客服务是GitHub上找的一个开源项目，删删改改，为自己所用）\n4. 因为网页的编辑器不是很稳点，我写博客一般都是先在本地写好Markdown，然后在贴到博客的编辑器中，再添加标签、分类等，最后再发布。需要很多重复工作。\n\n综上：自己的服务器有一定的服务维护成本，博客平台编辑体验不佳、自由度不高。\n\n\n\n所以决定尝试使用`GitHub Page`+`Hexo`搭建了自己的博客，优点有以下：\n\n## 使用GitHub+Hexo搭建博客的优点\n\n1. 无需维护服务器，服务是挂载在github的服务器上，由github维护（现由微软收购），维护成本几乎为0，且足够稳定。\n2. 自由度高，发布的内容随心而定，无需受平台的限制。\n3. 编辑体验好，无需反复搬运文本，打标签等，搭配软件Typora在本地编写MarkDown，博客编写完后一行命令一秒发布，契合程序员的操作体验。\n\n\n\n\n\n好下面简单介绍一下我使用到的工具和服务：\n\n## 使用到的工具和服务\n\n1. Hexo是一个非常成熟的博客框架，可以根据用户编辑的Markdown文件生成静态的htnl文件。当然用户可以选择自己喜欢的主题插件安装，以生成优美博客界面。\n2. GitHub提供了一个GitHub Page的功能，每个用户都可以有一个属于自己域名的静态页面。\n\n3. Typora软件，本地编写md文件，实时编写实时渲染，使用体验极佳。\n\n\n\n于是使用Hexo + GitHub Page便可搭建一个免费的个人博客，搭配Typora在本地编写MarkDown，舒适度不要太高。\n\n\n\n有了上面的工具做基础，实现起来就很简单啦，具体的步骤就不详细说明了，网上一搜一大把。\n\n这里提供几个搜索的关键词：`github.io`/`github page`/`hexo`/`个人博客`。\n\n\n\n安装过程并非一帆风顺，好在hexo技术和社区非常成熟，官方有文档、网络上也有非常多帖子。\n\n\n\n## 成果展示\n\n我选用的Hexo主题是Vue风格的`vexo`主题，干净简单。本人比较喜欢Vue的主题，Typora用的也是类Vue的主题。\n\n上一张效果图：\n\n![image-20200418235505523](https://tva1.sinaimg.cn/large/007S8ZIlly1gdycz4vzvuj31gq0u0gzp.jpg)\n\n\n\n下图为Typora软件截图：\n\n![image-20200418231011590](https://tva1.sinaimg.cn/large/007S8ZIlly1gdybof1yc0j30x60u0k3b.jpg)\n\n\n\n## 写在最后\n\n以后会在此记录一些心情、读书笔记、编程技术分享之类的文章。\n\n\n\n感谢阅读。","source":"_posts/折腾了半下午搞定了hexo，记录一下.md","raw":"---\ntitle: 折腾了半下午搞定了hexo，记录一下\ndate: 2020-04-18 17:29:35\ntags: \n- 心情\n- Hexo\n- GitHub Page\n- Typora\n- Blog\n---\n\n## 搭建了自己的GitHub Page博客\n\n关键词：`Hexo` 、`GitHub Page`、`Typora`、`Blog`\n\n\n对于我的个人博客，我一直没有停下折腾的脚步，最早的博客是大二时搭在腾讯云学生服务器上，后面也尝试了CSDN，cnblog，简书，掘金等博客平台，下面是我做的一个简单地分析对比：\n\n## 博客平台简分析对比\n\n1. 几大平台中`CSDN`的SEO做的最好，访问量最多的能有7000+ [https://blog.csdn.net/Mr_Zhang..](https://blog.csdn.net/Mr_Zhang____)\n\n2. 在博客平台发布文章需要审核，审核时长不定，且有一定的几率会不过审，自己搭建的博客则无需审核机制。\n3. 自己搭的博客是发布在的自己的腾讯云云服务器上的，网址： [zhangnlei.cn](zhangnlei.cn)。博客服务需要自己发布，云服务器需要定期维护，对个人来说是需要不小的时间成本和金钱投入。（我的博客服务是GitHub上找的一个开源项目，删删改改，为自己所用）\n4. 因为网页的编辑器不是很稳点，我写博客一般都是先在本地写好Markdown，然后在贴到博客的编辑器中，再添加标签、分类等，最后再发布。需要很多重复工作。\n\n综上：自己的服务器有一定的服务维护成本，博客平台编辑体验不佳、自由度不高。\n\n\n\n所以决定尝试使用`GitHub Page`+`Hexo`搭建了自己的博客，优点有以下：\n\n## 使用GitHub+Hexo搭建博客的优点\n\n1. 无需维护服务器，服务是挂载在github的服务器上，由github维护（现由微软收购），维护成本几乎为0，且足够稳定。\n2. 自由度高，发布的内容随心而定，无需受平台的限制。\n3. 编辑体验好，无需反复搬运文本，打标签等，搭配软件Typora在本地编写MarkDown，博客编写完后一行命令一秒发布，契合程序员的操作体验。\n\n\n\n\n\n好下面简单介绍一下我使用到的工具和服务：\n\n## 使用到的工具和服务\n\n1. Hexo是一个非常成熟的博客框架，可以根据用户编辑的Markdown文件生成静态的htnl文件。当然用户可以选择自己喜欢的主题插件安装，以生成优美博客界面。\n2. GitHub提供了一个GitHub Page的功能，每个用户都可以有一个属于自己域名的静态页面。\n\n3. Typora软件，本地编写md文件，实时编写实时渲染，使用体验极佳。\n\n\n\n于是使用Hexo + GitHub Page便可搭建一个免费的个人博客，搭配Typora在本地编写MarkDown，舒适度不要太高。\n\n\n\n有了上面的工具做基础，实现起来就很简单啦，具体的步骤就不详细说明了，网上一搜一大把。\n\n这里提供几个搜索的关键词：`github.io`/`github page`/`hexo`/`个人博客`。\n\n\n\n安装过程并非一帆风顺，好在hexo技术和社区非常成熟，官方有文档、网络上也有非常多帖子。\n\n\n\n## 成果展示\n\n我选用的Hexo主题是Vue风格的`vexo`主题，干净简单。本人比较喜欢Vue的主题，Typora用的也是类Vue的主题。\n\n上一张效果图：\n\n![image-20200418235505523](https://tva1.sinaimg.cn/large/007S8ZIlly1gdycz4vzvuj31gq0u0gzp.jpg)\n\n\n\n下图为Typora软件截图：\n\n![image-20200418231011590](https://tva1.sinaimg.cn/large/007S8ZIlly1gdybof1yc0j30x60u0k3b.jpg)\n\n\n\n## 写在最后\n\n以后会在此记录一些心情、读书笔记、编程技术分享之类的文章。\n\n\n\n感谢阅读。","slug":"折腾了半下午搞定了hexo，记录一下","published":1,"updated":"2020-04-19T06:11:29.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck96nl3lp0000ba8cfnmu94x0","content":"<h2 id=\"搭建了自己的GitHub-Page博客\"><a href=\"#搭建了自己的GitHub-Page博客\" class=\"headerlink\" title=\"搭建了自己的GitHub Page博客\"></a>搭建了自己的GitHub Page博客</h2><p>关键词：<code>Hexo</code> 、<code>GitHub Page</code>、<code>Typora</code>、<code>Blog</code></p>\n<p>对于我的个人博客，我一直没有停下折腾的脚步，最早的博客是大二时搭在腾讯云学生服务器上，后面也尝试了CSDN，cnblog，简书，掘金等博客平台，下面是我做的一个简单地分析对比：</p>\n<h2 id=\"博客平台简分析对比\"><a href=\"#博客平台简分析对比\" class=\"headerlink\" title=\"博客平台简分析对比\"></a>博客平台简分析对比</h2><ol>\n<li><p>几大平台中<code>CSDN</code>的SEO做的最好，访问量最多的能有7000+ <a href=\"https://blog.csdn.net/Mr_Zhang____\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Mr_Zhang..</a></p>\n</li>\n<li><p>在博客平台发布文章需要审核，审核时长不定，且有一定的几率会不过审，自己搭建的博客则无需审核机制。</p>\n</li>\n<li>自己搭的博客是发布在的自己的腾讯云云服务器上的，网址： <a href=\"zhangnlei.cn\">zhangnlei.cn</a>。博客服务需要自己发布，云服务器需要定期维护，对个人来说是需要不小的时间成本和金钱投入。（我的博客服务是GitHub上找的一个开源项目，删删改改，为自己所用）</li>\n<li>因为网页的编辑器不是很稳点，我写博客一般都是先在本地写好Markdown，然后在贴到博客的编辑器中，再添加标签、分类等，最后再发布。需要很多重复工作。</li>\n</ol>\n<p>综上：自己的服务器有一定的服务维护成本，博客平台编辑体验不佳、自由度不高。</p>\n<p>所以决定尝试使用<code>GitHub Page</code>+<code>Hexo</code>搭建了自己的博客，优点有以下：</p>\n<h2 id=\"使用GitHub-Hexo搭建博客的优点\"><a href=\"#使用GitHub-Hexo搭建博客的优点\" class=\"headerlink\" title=\"使用GitHub+Hexo搭建博客的优点\"></a>使用GitHub+Hexo搭建博客的优点</h2><ol>\n<li>无需维护服务器，服务是挂载在github的服务器上，由github维护（现由微软收购），维护成本几乎为0，且足够稳定。</li>\n<li>自由度高，发布的内容随心而定，无需受平台的限制。</li>\n<li>编辑体验好，无需反复搬运文本，打标签等，搭配软件Typora在本地编写MarkDown，博客编写完后一行命令一秒发布，契合程序员的操作体验。</li>\n</ol>\n<p>好下面简单介绍一下我使用到的工具和服务：</p>\n<h2 id=\"使用到的工具和服务\"><a href=\"#使用到的工具和服务\" class=\"headerlink\" title=\"使用到的工具和服务\"></a>使用到的工具和服务</h2><ol>\n<li>Hexo是一个非常成熟的博客框架，可以根据用户编辑的Markdown文件生成静态的htnl文件。当然用户可以选择自己喜欢的主题插件安装，以生成优美博客界面。</li>\n<li><p>GitHub提供了一个GitHub Page的功能，每个用户都可以有一个属于自己域名的静态页面。</p>\n</li>\n<li><p>Typora软件，本地编写md文件，实时编写实时渲染，使用体验极佳。</p>\n</li>\n</ol>\n<p>于是使用Hexo + GitHub Page便可搭建一个免费的个人博客，搭配Typora在本地编写MarkDown，舒适度不要太高。</p>\n<p>有了上面的工具做基础，实现起来就很简单啦，具体的步骤就不详细说明了，网上一搜一大把。</p>\n<p>这里提供几个搜索的关键词：<code>github.io</code>/<code>github page</code>/<code>hexo</code>/<code>个人博客</code>。</p>\n<p>安装过程并非一帆风顺，好在hexo技术和社区非常成熟，官方有文档、网络上也有非常多帖子。</p>\n<h2 id=\"成果展示\"><a href=\"#成果展示\" class=\"headerlink\" title=\"成果展示\"></a>成果展示</h2><p>我选用的Hexo主题是Vue风格的<code>vexo</code>主题，干净简单。本人比较喜欢Vue的主题，Typora用的也是类Vue的主题。</p>\n<p>上一张效果图：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdycz4vzvuj31gq0u0gzp.jpg\" alt=\"image-20200418235505523\"></p>\n<p>下图为Typora软件截图：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdybof1yc0j30x60u0k3b.jpg\" alt=\"image-20200418231011590\"></p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>以后会在此记录一些心情、读书笔记、编程技术分享之类的文章。</p>\n<p>感谢阅读。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"搭建了自己的GitHub-Page博客\"><a href=\"#搭建了自己的GitHub-Page博客\" class=\"headerlink\" title=\"搭建了自己的GitHub Page博客\"></a>搭建了自己的GitHub Page博客</h2><p>关键词：<code>Hexo</code> 、<code>GitHub Page</code>、<code>Typora</code>、<code>Blog</code></p>\n<p>对于我的个人博客，我一直没有停下折腾的脚步，最早的博客是大二时搭在腾讯云学生服务器上，后面也尝试了CSDN，cnblog，简书，掘金等博客平台，下面是我做的一个简单地分析对比：</p>\n<h2 id=\"博客平台简分析对比\"><a href=\"#博客平台简分析对比\" class=\"headerlink\" title=\"博客平台简分析对比\"></a>博客平台简分析对比</h2><ol>\n<li><p>几大平台中<code>CSDN</code>的SEO做的最好，访问量最多的能有7000+ <a href=\"https://blog.csdn.net/Mr_Zhang____\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Mr_Zhang..</a></p>\n</li>\n<li><p>在博客平台发布文章需要审核，审核时长不定，且有一定的几率会不过审，自己搭建的博客则无需审核机制。</p>\n</li>\n<li>自己搭的博客是发布在的自己的腾讯云云服务器上的，网址： <a href=\"zhangnlei.cn\">zhangnlei.cn</a>。博客服务需要自己发布，云服务器需要定期维护，对个人来说是需要不小的时间成本和金钱投入。（我的博客服务是GitHub上找的一个开源项目，删删改改，为自己所用）</li>\n<li>因为网页的编辑器不是很稳点，我写博客一般都是先在本地写好Markdown，然后在贴到博客的编辑器中，再添加标签、分类等，最后再发布。需要很多重复工作。</li>\n</ol>\n<p>综上：自己的服务器有一定的服务维护成本，博客平台编辑体验不佳、自由度不高。</p>\n<p>所以决定尝试使用<code>GitHub Page</code>+<code>Hexo</code>搭建了自己的博客，优点有以下：</p>\n<h2 id=\"使用GitHub-Hexo搭建博客的优点\"><a href=\"#使用GitHub-Hexo搭建博客的优点\" class=\"headerlink\" title=\"使用GitHub+Hexo搭建博客的优点\"></a>使用GitHub+Hexo搭建博客的优点</h2><ol>\n<li>无需维护服务器，服务是挂载在github的服务器上，由github维护（现由微软收购），维护成本几乎为0，且足够稳定。</li>\n<li>自由度高，发布的内容随心而定，无需受平台的限制。</li>\n<li>编辑体验好，无需反复搬运文本，打标签等，搭配软件Typora在本地编写MarkDown，博客编写完后一行命令一秒发布，契合程序员的操作体验。</li>\n</ol>\n<p>好下面简单介绍一下我使用到的工具和服务：</p>\n<h2 id=\"使用到的工具和服务\"><a href=\"#使用到的工具和服务\" class=\"headerlink\" title=\"使用到的工具和服务\"></a>使用到的工具和服务</h2><ol>\n<li>Hexo是一个非常成熟的博客框架，可以根据用户编辑的Markdown文件生成静态的htnl文件。当然用户可以选择自己喜欢的主题插件安装，以生成优美博客界面。</li>\n<li><p>GitHub提供了一个GitHub Page的功能，每个用户都可以有一个属于自己域名的静态页面。</p>\n</li>\n<li><p>Typora软件，本地编写md文件，实时编写实时渲染，使用体验极佳。</p>\n</li>\n</ol>\n<p>于是使用Hexo + GitHub Page便可搭建一个免费的个人博客，搭配Typora在本地编写MarkDown，舒适度不要太高。</p>\n<p>有了上面的工具做基础，实现起来就很简单啦，具体的步骤就不详细说明了，网上一搜一大把。</p>\n<p>这里提供几个搜索的关键词：<code>github.io</code>/<code>github page</code>/<code>hexo</code>/<code>个人博客</code>。</p>\n<p>安装过程并非一帆风顺，好在hexo技术和社区非常成熟，官方有文档、网络上也有非常多帖子。</p>\n<h2 id=\"成果展示\"><a href=\"#成果展示\" class=\"headerlink\" title=\"成果展示\"></a>成果展示</h2><p>我选用的Hexo主题是Vue风格的<code>vexo</code>主题，干净简单。本人比较喜欢Vue的主题，Typora用的也是类Vue的主题。</p>\n<p>上一张效果图：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdycz4vzvuj31gq0u0gzp.jpg\" alt=\"image-20200418235505523\"></p>\n<p>下图为Typora软件截图：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdybof1yc0j30x60u0k3b.jpg\" alt=\"image-20200418231011590\"></p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>以后会在此记录一些心情、读书笔记、编程技术分享之类的文章。</p>\n<p>感谢阅读。</p>\n"},{"title":"博客平台对比 - 想写博客该选用那个平台呢？","date":"2020-04-19T03:27:41.000Z","_content":"\n\n\n对于我的个人博客，我一直没有停下折腾的脚步，最早的博客是大二时搭在腾讯云学生服务器上，github上找的博客项目，删删改改改成自己的，后面也尝试了CSDN，cnblog，简书，掘金等博客平台，下面是我做的一个简单地分析对比：\n\n1. 几大平台中`CSDN`的SEO做的最好，原因见下图：\n\n![image-20200419001254184](https://tva1.sinaimg.cn/large/007S8ZIlly1gdyx11o5ruj31lp0u0tga.jpg)\n\n访问量最多的能有7000+ [https://blog.csdn.net/Mr_Zhang..](https://blog.csdn.net/Mr_Zhang____)\n\n访问最多的几篇有一个共性：都是解决具体的问题，也是让人哭笑不得的事情。\n\n但是这类文章要写好也不是件容易的事情，先写解决方案，在写原理，出现这种问题的原因。这样让别人看了也能有一点收获。\n\n其他文章无人问津。\n\n2. 博客平台发布的文章全都需要审核，审核时长不定，且有一定的几率会不过审，自己搭建的博客则没有审核机制。\n3. 自己搭建的博客是发布在的自己的腾讯云云服务器上的，网址： [zhangnlei.cn](zhangnlei.cn)。云服务器需要定期维护，对个人来说是需要不小的时间成本和金钱投入。\n\n\n\nzhangnlei\n\n![image-20200419112759165](https://tva1.sinaimg.cn/large/007S8ZIlly1gdyx0322b7j32160j4dj0.jpg)\n\n![image-20200419112806994](https://tva1.sinaimg.cn/large/007S8ZIlly1gdyx07vp9dj31ta0kitbx.jpg)","source":"_posts/博客平台对比-想写博客该选用那个平台呢？.md","raw":"---\ntitle: 博客平台对比 - 想写博客该选用那个平台呢？\ndate: 2020-04-19 11:27:41\ntags:\n---\n\n\n\n对于我的个人博客，我一直没有停下折腾的脚步，最早的博客是大二时搭在腾讯云学生服务器上，github上找的博客项目，删删改改改成自己的，后面也尝试了CSDN，cnblog，简书，掘金等博客平台，下面是我做的一个简单地分析对比：\n\n1. 几大平台中`CSDN`的SEO做的最好，原因见下图：\n\n![image-20200419001254184](https://tva1.sinaimg.cn/large/007S8ZIlly1gdyx11o5ruj31lp0u0tga.jpg)\n\n访问量最多的能有7000+ [https://blog.csdn.net/Mr_Zhang..](https://blog.csdn.net/Mr_Zhang____)\n\n访问最多的几篇有一个共性：都是解决具体的问题，也是让人哭笑不得的事情。\n\n但是这类文章要写好也不是件容易的事情，先写解决方案，在写原理，出现这种问题的原因。这样让别人看了也能有一点收获。\n\n其他文章无人问津。\n\n2. 博客平台发布的文章全都需要审核，审核时长不定，且有一定的几率会不过审，自己搭建的博客则没有审核机制。\n3. 自己搭建的博客是发布在的自己的腾讯云云服务器上的，网址： [zhangnlei.cn](zhangnlei.cn)。云服务器需要定期维护，对个人来说是需要不小的时间成本和金钱投入。\n\n\n\nzhangnlei\n\n![image-20200419112759165](https://tva1.sinaimg.cn/large/007S8ZIlly1gdyx0322b7j32160j4dj0.jpg)\n\n![image-20200419112806994](https://tva1.sinaimg.cn/large/007S8ZIlly1gdyx07vp9dj31ta0kitbx.jpg)","slug":"博客平台对比-想写博客该选用那个平台呢？","published":1,"updated":"2020-04-19T04:03:54.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck96nl3lu0002ba8cg87q80ta","content":"<p>对于我的个人博客，我一直没有停下折腾的脚步，最早的博客是大二时搭在腾讯云学生服务器上，github上找的博客项目，删删改改改成自己的，后面也尝试了CSDN，cnblog，简书，掘金等博客平台，下面是我做的一个简单地分析对比：</p>\n<ol>\n<li>几大平台中<code>CSDN</code>的SEO做的最好，原因见下图：</li>\n</ol>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdyx11o5ruj31lp0u0tga.jpg\" alt=\"image-20200419001254184\"></p>\n<p>访问量最多的能有7000+ <a href=\"https://blog.csdn.net/Mr_Zhang____\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Mr_Zhang..</a></p>\n<p>访问最多的几篇有一个共性：都是解决具体的问题，也是让人哭笑不得的事情。</p>\n<p>但是这类文章要写好也不是件容易的事情，先写解决方案，在写原理，出现这种问题的原因。这样让别人看了也能有一点收获。</p>\n<p>其他文章无人问津。</p>\n<ol start=\"2\">\n<li>博客平台发布的文章全都需要审核，审核时长不定，且有一定的几率会不过审，自己搭建的博客则没有审核机制。</li>\n<li>自己搭建的博客是发布在的自己的腾讯云云服务器上的，网址： <a href=\"zhangnlei.cn\">zhangnlei.cn</a>。云服务器需要定期维护，对个人来说是需要不小的时间成本和金钱投入。</li>\n</ol>\n<p>zhangnlei</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdyx0322b7j32160j4dj0.jpg\" alt=\"image-20200419112759165\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdyx07vp9dj31ta0kitbx.jpg\" alt=\"image-20200419112806994\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>对于我的个人博客，我一直没有停下折腾的脚步，最早的博客是大二时搭在腾讯云学生服务器上，github上找的博客项目，删删改改改成自己的，后面也尝试了CSDN，cnblog，简书，掘金等博客平台，下面是我做的一个简单地分析对比：</p>\n<ol>\n<li>几大平台中<code>CSDN</code>的SEO做的最好，原因见下图：</li>\n</ol>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdyx11o5ruj31lp0u0tga.jpg\" alt=\"image-20200419001254184\"></p>\n<p>访问量最多的能有7000+ <a href=\"https://blog.csdn.net/Mr_Zhang____\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Mr_Zhang..</a></p>\n<p>访问最多的几篇有一个共性：都是解决具体的问题，也是让人哭笑不得的事情。</p>\n<p>但是这类文章要写好也不是件容易的事情，先写解决方案，在写原理，出现这种问题的原因。这样让别人看了也能有一点收获。</p>\n<p>其他文章无人问津。</p>\n<ol start=\"2\">\n<li>博客平台发布的文章全都需要审核，审核时长不定，且有一定的几率会不过审，自己搭建的博客则没有审核机制。</li>\n<li>自己搭建的博客是发布在的自己的腾讯云云服务器上的，网址： <a href=\"zhangnlei.cn\">zhangnlei.cn</a>。云服务器需要定期维护，对个人来说是需要不小的时间成本和金钱投入。</li>\n</ol>\n<p>zhangnlei</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdyx0322b7j32160j4dj0.jpg\" alt=\"image-20200419112759165\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdyx07vp9dj31ta0kitbx.jpg\" alt=\"image-20200419112806994\"></p>\n"},{"title":"Vue - 滚动条滚动到最下方时更新","date":"2020-04-18T09:38:13.000Z","_content":"\n\n\n`代码展示`\n\n```js\nwatchScroll() {\n  this.$nextTick(() => {\n    const el = this.$refs[\"discussInfoBox\"];\n    const offsetHeight = el.offsetHeight;\n    el.onscroll = () => {\n      const scrollTop = el.scrollTop;\n      const scrollHeight = el.scrollHeight;\n      if (offsetHeight + scrollTop - scrollHeight >= -1) {\n        // 需要执行的代码\n        console.log(\"get info \");\n      }\n    };\n  });\n},\n```\n\n\n\n`使用步骤`\n\n1. 第三行中的`discussInfoBox`为要监听的div的ID\n2. 在第十行编写当滚动条滚动到最下方时需要调用的函数\n3. 在需要的地方调用该函数。例如created方法或其他监听事件中\n\n","source":"_posts/Vue-滚动条滚动到最下方时更新.md","raw":"---\ntitle: Vue - 滚动条滚动到最下方时更新\ndate: 2020-04-18 17:38:13\ntags: \n- Vue\n---\n\n\n\n`代码展示`\n\n```js\nwatchScroll() {\n  this.$nextTick(() => {\n    const el = this.$refs[\"discussInfoBox\"];\n    const offsetHeight = el.offsetHeight;\n    el.onscroll = () => {\n      const scrollTop = el.scrollTop;\n      const scrollHeight = el.scrollHeight;\n      if (offsetHeight + scrollTop - scrollHeight >= -1) {\n        // 需要执行的代码\n        console.log(\"get info \");\n      }\n    };\n  });\n},\n```\n\n\n\n`使用步骤`\n\n1. 第三行中的`discussInfoBox`为要监听的div的ID\n2. 在第十行编写当滚动条滚动到最下方时需要调用的函数\n3. 在需要的地方调用该函数。例如created方法或其他监听事件中\n\n","slug":"Vue-滚动条滚动到最下方时更新","published":1,"updated":"2020-04-19T04:03:59.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck96nl3lw0004ba8c3fr4a8pr","content":"<p><code>代码展示</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watchScroll() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> el = <span class=\"keyword\">this</span>.$refs[<span class=\"string\">\"discussInfoBox\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> offsetHeight = el.offsetHeight;</span><br><span class=\"line\">    el.onscroll = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> scrollTop = el.scrollTop;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> scrollHeight = el.scrollHeight;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (offsetHeight + scrollTop - scrollHeight &gt;= <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 需要执行的代码</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"get info \"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p><code>使用步骤</code></p>\n<ol>\n<li>第三行中的<code>discussInfoBox</code>为要监听的div的ID</li>\n<li>在第十行编写当滚动条滚动到最下方时需要调用的函数</li>\n<li>在需要的地方调用该函数。例如created方法或其他监听事件中</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><code>代码展示</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watchScroll() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> el = <span class=\"keyword\">this</span>.$refs[<span class=\"string\">\"discussInfoBox\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> offsetHeight = el.offsetHeight;</span><br><span class=\"line\">    el.onscroll = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> scrollTop = el.scrollTop;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> scrollHeight = el.scrollHeight;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (offsetHeight + scrollTop - scrollHeight &gt;= <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 需要执行的代码</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"get info \"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p><code>使用步骤</code></p>\n<ol>\n<li>第三行中的<code>discussInfoBox</code>为要监听的div的ID</li>\n<li>在第十行编写当滚动条滚动到最下方时需要调用的函数</li>\n<li>在需要的地方调用该函数。例如created方法或其他监听事件中</li>\n</ol>\n"},{"title":"Vue - 父组件如何更新子组件的参数","date":"2020-04-18T09:35:31.000Z","_content":"\n\n\n\n\n## 父组件如何更新子组件的参数\n\n以下为两种简单地思路：\n\n### 1. 父组件更新子组件的prop参数\n\n所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。\n\n额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。\n\n### 2. 父组件调用子组件的方法\n\n1. 在子组件中定义函数\n\n![image-20200417173318790](https://tva1.sinaimg.cn/large/007S8ZIlly1gdy20dp3p5j30jz0b6dgu.jpg)\n\n2. 在父组件中的使用处添加ref \n\n![image-20200417173352552](https://tva1.sinaimg.cn/large/007S8ZIlly1gdy20eultjj30gf083mxs.jpg)\n\n3. 在需要的地方调用\n\n![image-20200417173511471](https://tva1.sinaimg.cn/large/007S8ZIlly1gdy20edzejj30bo08y0tb.jpg)\n\n\n\n\n\n","source":"_posts/Vue-父组件如何更新子组件的参数.md","raw":"---\ntitle: Vue - 父组件如何更新子组件的参数\ndate: 2020-04-18 17:35:31\ntags: \n- Vue\n---\n\n\n\n\n\n## 父组件如何更新子组件的参数\n\n以下为两种简单地思路：\n\n### 1. 父组件更新子组件的prop参数\n\n所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。\n\n额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。\n\n### 2. 父组件调用子组件的方法\n\n1. 在子组件中定义函数\n\n![image-20200417173318790](https://tva1.sinaimg.cn/large/007S8ZIlly1gdy20dp3p5j30jz0b6dgu.jpg)\n\n2. 在父组件中的使用处添加ref \n\n![image-20200417173352552](https://tva1.sinaimg.cn/large/007S8ZIlly1gdy20eultjj30gf083mxs.jpg)\n\n3. 在需要的地方调用\n\n![image-20200417173511471](https://tva1.sinaimg.cn/large/007S8ZIlly1gdy20edzejj30bo08y0tb.jpg)\n\n\n\n\n\n","slug":"Vue-父组件如何更新子组件的参数","published":1,"updated":"2020-04-18T11:56:28.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck96nl3m00005ba8ch9di78th","content":"<h2 id=\"父组件如何更新子组件的参数\"><a href=\"#父组件如何更新子组件的参数\" class=\"headerlink\" title=\"父组件如何更新子组件的参数\"></a>父组件如何更新子组件的参数</h2><p>以下为两种简单地思路：</p>\n<h3 id=\"1-父组件更新子组件的prop参数\"><a href=\"#1-父组件更新子组件的prop参数\" class=\"headerlink\" title=\"1. 父组件更新子组件的prop参数\"></a>1. 父组件更新子组件的prop参数</h3><p>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p>\n<p>额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。</p>\n<h3 id=\"2-父组件调用子组件的方法\"><a href=\"#2-父组件调用子组件的方法\" class=\"headerlink\" title=\"2. 父组件调用子组件的方法\"></a>2. 父组件调用子组件的方法</h3><ol>\n<li>在子组件中定义函数</li>\n</ol>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdy20dp3p5j30jz0b6dgu.jpg\" alt=\"image-20200417173318790\"></p>\n<ol start=\"2\">\n<li>在父组件中的使用处添加ref </li>\n</ol>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdy20eultjj30gf083mxs.jpg\" alt=\"image-20200417173352552\"></p>\n<ol start=\"3\">\n<li>在需要的地方调用</li>\n</ol>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdy20edzejj30bo08y0tb.jpg\" alt=\"image-20200417173511471\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"父组件如何更新子组件的参数\"><a href=\"#父组件如何更新子组件的参数\" class=\"headerlink\" title=\"父组件如何更新子组件的参数\"></a>父组件如何更新子组件的参数</h2><p>以下为两种简单地思路：</p>\n<h3 id=\"1-父组件更新子组件的prop参数\"><a href=\"#1-父组件更新子组件的prop参数\" class=\"headerlink\" title=\"1. 父组件更新子组件的prop参数\"></a>1. 父组件更新子组件的prop参数</h3><p>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p>\n<p>额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。</p>\n<h3 id=\"2-父组件调用子组件的方法\"><a href=\"#2-父组件调用子组件的方法\" class=\"headerlink\" title=\"2. 父组件调用子组件的方法\"></a>2. 父组件调用子组件的方法</h3><ol>\n<li>在子组件中定义函数</li>\n</ol>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdy20dp3p5j30jz0b6dgu.jpg\" alt=\"image-20200417173318790\"></p>\n<ol start=\"2\">\n<li>在父组件中的使用处添加ref </li>\n</ol>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdy20eultjj30gf083mxs.jpg\" alt=\"image-20200417173352552\"></p>\n<ol start=\"3\">\n<li>在需要的地方调用</li>\n</ol>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdy20edzejj30bo08y0tb.jpg\" alt=\"image-20200417173511471\"></p>\n"},{"title":"后端 - Git学习分享","date":"2020-04-18T11:22:42.000Z","_content":"\n# 后端 - Git学习分享\n\n@auther `张念磊`\n@date 2020/2/17\n\n## 一个学习git的网站\n\n[https://learngitbranching.js.org/](https://learngitbranching.js.org/)\n\n\n\n```shell\n# 基础\ngit checkout -b hotfix # 新建一个分支\n\ngit checkout C2 # 分离head\ngit branch -f master C2 # 将分支指向提交C2\ngit branch -f master HEAD^ # 将master指向HEAD的上一个节点\ngit branch -f master HEAD~3 # 将master指向HEAD的前面第三个节点\ngit reset Head^ # 撤销一次本地提交\ngit revert HEAD^ # 撤销一次远程提交\n\ngit rebase master # 改变代码提交的顺序\ngit cherry-pick C2 C3 # 将C2 C3次提交添加到当前分支 git cherry-pick 'commit id'  # 复制一个特定的提交到当前的分支\ngit rebase -i HEAD~4 # 交互式rebase最近的4次提交\n```\n\n\n\n![image-20200218102321108](https://tva1.sinaimg.cn/large/007S8ZIlly1gdy53zzv41j30z50q90v5.jpg)\n\n\n\n示例 ： 把分支以图像的方式展现给用户\n\n![image-20200218220559729](https://tva1.sinaimg.cn/large/007S8ZIlly1gdy542q42ej30ql0fggn3.jpg)\n\n\n\n### 通关截图\n\n![image-20200218225905225](https://tva1.sinaimg.cn/large/007S8ZIlly1gdy5414r55j30yq0rtmzv.jpg)\n\n\n\n主要介绍的两个命令 rebase cherry-pick \n\n![image-20200327160103150](https://tva1.sinaimg.cn/large/007S8ZIlly1gdy53yvq4nj30q00pj0um.jpg)\n\n\n\n## 配置别名\n\n有没有经常敲错命令？比如`git status`\n\n如果敲`git st`就表示`git status`那就简单多了，当然这种偷懒的办法我们是极力赞成的。\n\n我们只需要敲一行命令，告诉Git，以后`st`就表示`status`：\n\n```\n$ git config --global alias.st status\n```\n\n好了，现在敲`git st`看看效果。\n\n当然还有别的命令可以简写，很多人都用`co`表示`checkout`，`ci`表示`commit`，`br`表示`branch`：\n\n```\n$ git config --global alias.co checkout\n$ git config --global alias.ci commit\n$ git config --global alias.br branch\n```\n\n提交就可以简写成：\n\n```\n$ git ci -m \"bala bala bala...\"\n```\n\n`--global`参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。\n\n\n\n`git log `\n\n![image-20200327154624267](https://tva1.sinaimg.cn/large/007S8ZIlly1gdy53zj3urj317w0u0dke.jpg)\n\n\n甚至还有人丧心病狂地把`lg`配置成了：\n\n```\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n```\n\n来看看`git lg`的效果：\n\n<img src=\"https://tva1.sinaimg.cn/large/00831rSTgy1gd8j6l772pj317w0u015d.jpg\" alt=\"image-20200327154509668\" style=\"zoom: 50%;\" />\n\n\n\n\n\n## 其他操作：\n\n连接远程仓库\n**git remote add origin 仓库地址**\n\n查看远程连接\n**git remote -v**\n\ngit取消与远程仓库的连接\n**git remote remove origin**","source":"_posts/后端-Git学习分享.md","raw":"---\ntitle: 后端 - Git学习分享\ndate: 2020-04-18 19:22:42\ntags: \n- Git\n---\n\n# 后端 - Git学习分享\n\n@auther `张念磊`\n@date 2020/2/17\n\n## 一个学习git的网站\n\n[https://learngitbranching.js.org/](https://learngitbranching.js.org/)\n\n\n\n```shell\n# 基础\ngit checkout -b hotfix # 新建一个分支\n\ngit checkout C2 # 分离head\ngit branch -f master C2 # 将分支指向提交C2\ngit branch -f master HEAD^ # 将master指向HEAD的上一个节点\ngit branch -f master HEAD~3 # 将master指向HEAD的前面第三个节点\ngit reset Head^ # 撤销一次本地提交\ngit revert HEAD^ # 撤销一次远程提交\n\ngit rebase master # 改变代码提交的顺序\ngit cherry-pick C2 C3 # 将C2 C3次提交添加到当前分支 git cherry-pick 'commit id'  # 复制一个特定的提交到当前的分支\ngit rebase -i HEAD~4 # 交互式rebase最近的4次提交\n```\n\n\n\n![image-20200218102321108](https://tva1.sinaimg.cn/large/007S8ZIlly1gdy53zzv41j30z50q90v5.jpg)\n\n\n\n示例 ： 把分支以图像的方式展现给用户\n\n![image-20200218220559729](https://tva1.sinaimg.cn/large/007S8ZIlly1gdy542q42ej30ql0fggn3.jpg)\n\n\n\n### 通关截图\n\n![image-20200218225905225](https://tva1.sinaimg.cn/large/007S8ZIlly1gdy5414r55j30yq0rtmzv.jpg)\n\n\n\n主要介绍的两个命令 rebase cherry-pick \n\n![image-20200327160103150](https://tva1.sinaimg.cn/large/007S8ZIlly1gdy53yvq4nj30q00pj0um.jpg)\n\n\n\n## 配置别名\n\n有没有经常敲错命令？比如`git status`\n\n如果敲`git st`就表示`git status`那就简单多了，当然这种偷懒的办法我们是极力赞成的。\n\n我们只需要敲一行命令，告诉Git，以后`st`就表示`status`：\n\n```\n$ git config --global alias.st status\n```\n\n好了，现在敲`git st`看看效果。\n\n当然还有别的命令可以简写，很多人都用`co`表示`checkout`，`ci`表示`commit`，`br`表示`branch`：\n\n```\n$ git config --global alias.co checkout\n$ git config --global alias.ci commit\n$ git config --global alias.br branch\n```\n\n提交就可以简写成：\n\n```\n$ git ci -m \"bala bala bala...\"\n```\n\n`--global`参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。\n\n\n\n`git log `\n\n![image-20200327154624267](https://tva1.sinaimg.cn/large/007S8ZIlly1gdy53zj3urj317w0u0dke.jpg)\n\n\n甚至还有人丧心病狂地把`lg`配置成了：\n\n```\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n```\n\n来看看`git lg`的效果：\n\n<img src=\"https://tva1.sinaimg.cn/large/00831rSTgy1gd8j6l772pj317w0u015d.jpg\" alt=\"image-20200327154509668\" style=\"zoom: 50%;\" />\n\n\n\n\n\n## 其他操作：\n\n连接远程仓库\n**git remote add origin 仓库地址**\n\n查看远程连接\n**git remote -v**\n\ngit取消与远程仓库的连接\n**git remote remove origin**","slug":"后端-Git学习分享","published":1,"updated":"2020-04-18T11:55:51.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck96nl3m20006ba8ch6nkgmsy","content":"<h1 id=\"后端-Git学习分享\"><a href=\"#后端-Git学习分享\" class=\"headerlink\" title=\"后端 - Git学习分享\"></a>后端 - Git学习分享</h1><p>@auther <code>张念磊</code><br>@date 2020/2/17</p>\n<h2 id=\"一个学习git的网站\"><a href=\"#一个学习git的网站\" class=\"headerlink\" title=\"一个学习git的网站\"></a>一个学习git的网站</h2><p><a href=\"https://learngitbranching.js.org/\" target=\"_blank\" rel=\"noopener\">https://learngitbranching.js.org/</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 基础</span></span><br><span class=\"line\">git checkout -b hotfix # 新建一个分支</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout C2 # 分离head</span><br><span class=\"line\">git branch -f master C2 # 将分支指向提交C2</span><br><span class=\"line\">git branch -f master HEAD^ # 将master指向HEAD的上一个节点</span><br><span class=\"line\">git branch -f master HEAD~3 # 将master指向HEAD的前面第三个节点</span><br><span class=\"line\">git reset Head^ # 撤销一次本地提交</span><br><span class=\"line\">git revert HEAD^ # 撤销一次远程提交</span><br><span class=\"line\"></span><br><span class=\"line\">git rebase master # 改变代码提交的顺序</span><br><span class=\"line\">git cherry-pick C2 C3 # 将C2 C3次提交添加到当前分支 git cherry-pick 'commit id'  # 复制一个特定的提交到当前的分支</span><br><span class=\"line\">git rebase -i HEAD~4 # 交互式rebase最近的4次提交</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdy53zzv41j30z50q90v5.jpg\" alt=\"image-20200218102321108\"></p>\n<p>示例 ： 把分支以图像的方式展现给用户</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdy542q42ej30ql0fggn3.jpg\" alt=\"image-20200218220559729\"></p>\n<h3 id=\"通关截图\"><a href=\"#通关截图\" class=\"headerlink\" title=\"通关截图\"></a>通关截图</h3><p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdy5414r55j30yq0rtmzv.jpg\" alt=\"image-20200218225905225\"></p>\n<p>主要介绍的两个命令 rebase cherry-pick </p>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdy53yvq4nj30q00pj0um.jpg\" alt=\"image-20200327160103150\"></p>\n<h2 id=\"配置别名\"><a href=\"#配置别名\" class=\"headerlink\" title=\"配置别名\"></a>配置别名</h2><p>有没有经常敲错命令？比如<code>git status</code></p>\n<p>如果敲<code>git st</code>就表示<code>git status</code>那就简单多了，当然这种偷懒的办法我们是极力赞成的。</p>\n<p>我们只需要敲一行命令，告诉Git，以后<code>st</code>就表示<code>status</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.st status</span><br></pre></td></tr></table></figure>\n<p>好了，现在敲<code>git st</code>看看效果。</p>\n<p>当然还有别的命令可以简写，很多人都用<code>co</code>表示<code>checkout</code>，<code>ci</code>表示<code>commit</code>，<code>br</code>表示<code>branch</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.co checkout</span><br><span class=\"line\">$ git config --global alias.ci commit</span><br><span class=\"line\">$ git config --global alias.br branch</span><br></pre></td></tr></table></figure>\n<p>提交就可以简写成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git ci -m &quot;bala bala bala...&quot;</span><br></pre></td></tr></table></figure>\n<p><code>--global</code>参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。</p>\n<p><code>git log</code></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdy53zj3urj317w0u0dke.jpg\" alt=\"image-20200327154624267\"></p>\n<p>甚至还有人丧心病狂地把<code>lg</code>配置成了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.lg &quot;log --color --graph --pretty&#x3D;format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</span><br></pre></td></tr></table></figure>\n<p>来看看<code>git lg</code>的效果：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/00831rSTgy1gd8j6l772pj317w0u015d.jpg\" alt=\"image-20200327154509668\" style=\"zoom: 50%;\" /></p>\n<h2 id=\"其他操作：\"><a href=\"#其他操作：\" class=\"headerlink\" title=\"其他操作：\"></a>其他操作：</h2><p>连接远程仓库<br><strong>git remote add origin 仓库地址</strong></p>\n<p>查看远程连接<br><strong>git remote -v</strong></p>\n<p>git取消与远程仓库的连接<br><strong>git remote remove origin</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"后端-Git学习分享\"><a href=\"#后端-Git学习分享\" class=\"headerlink\" title=\"后端 - Git学习分享\"></a>后端 - Git学习分享</h1><p>@auther <code>张念磊</code><br>@date 2020/2/17</p>\n<h2 id=\"一个学习git的网站\"><a href=\"#一个学习git的网站\" class=\"headerlink\" title=\"一个学习git的网站\"></a>一个学习git的网站</h2><p><a href=\"https://learngitbranching.js.org/\" target=\"_blank\" rel=\"noopener\">https://learngitbranching.js.org/</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 基础</span></span><br><span class=\"line\">git checkout -b hotfix # 新建一个分支</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout C2 # 分离head</span><br><span class=\"line\">git branch -f master C2 # 将分支指向提交C2</span><br><span class=\"line\">git branch -f master HEAD^ # 将master指向HEAD的上一个节点</span><br><span class=\"line\">git branch -f master HEAD~3 # 将master指向HEAD的前面第三个节点</span><br><span class=\"line\">git reset Head^ # 撤销一次本地提交</span><br><span class=\"line\">git revert HEAD^ # 撤销一次远程提交</span><br><span class=\"line\"></span><br><span class=\"line\">git rebase master # 改变代码提交的顺序</span><br><span class=\"line\">git cherry-pick C2 C3 # 将C2 C3次提交添加到当前分支 git cherry-pick 'commit id'  # 复制一个特定的提交到当前的分支</span><br><span class=\"line\">git rebase -i HEAD~4 # 交互式rebase最近的4次提交</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdy53zzv41j30z50q90v5.jpg\" alt=\"image-20200218102321108\"></p>\n<p>示例 ： 把分支以图像的方式展现给用户</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdy542q42ej30ql0fggn3.jpg\" alt=\"image-20200218220559729\"></p>\n<h3 id=\"通关截图\"><a href=\"#通关截图\" class=\"headerlink\" title=\"通关截图\"></a>通关截图</h3><p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdy5414r55j30yq0rtmzv.jpg\" alt=\"image-20200218225905225\"></p>\n<p>主要介绍的两个命令 rebase cherry-pick </p>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdy53yvq4nj30q00pj0um.jpg\" alt=\"image-20200327160103150\"></p>\n<h2 id=\"配置别名\"><a href=\"#配置别名\" class=\"headerlink\" title=\"配置别名\"></a>配置别名</h2><p>有没有经常敲错命令？比如<code>git status</code></p>\n<p>如果敲<code>git st</code>就表示<code>git status</code>那就简单多了，当然这种偷懒的办法我们是极力赞成的。</p>\n<p>我们只需要敲一行命令，告诉Git，以后<code>st</code>就表示<code>status</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.st status</span><br></pre></td></tr></table></figure>\n<p>好了，现在敲<code>git st</code>看看效果。</p>\n<p>当然还有别的命令可以简写，很多人都用<code>co</code>表示<code>checkout</code>，<code>ci</code>表示<code>commit</code>，<code>br</code>表示<code>branch</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.co checkout</span><br><span class=\"line\">$ git config --global alias.ci commit</span><br><span class=\"line\">$ git config --global alias.br branch</span><br></pre></td></tr></table></figure>\n<p>提交就可以简写成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git ci -m &quot;bala bala bala...&quot;</span><br></pre></td></tr></table></figure>\n<p><code>--global</code>参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。</p>\n<p><code>git log</code></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gdy53zj3urj317w0u0dke.jpg\" alt=\"image-20200327154624267\"></p>\n<p>甚至还有人丧心病狂地把<code>lg</code>配置成了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.lg &quot;log --color --graph --pretty&#x3D;format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</span><br></pre></td></tr></table></figure>\n<p>来看看<code>git lg</code>的效果：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/00831rSTgy1gd8j6l772pj317w0u015d.jpg\" alt=\"image-20200327154509668\" style=\"zoom: 50%;\" /></p>\n<h2 id=\"其他操作：\"><a href=\"#其他操作：\" class=\"headerlink\" title=\"其他操作：\"></a>其他操作：</h2><p>连接远程仓库<br><strong>git remote add origin 仓库地址</strong></p>\n<p>查看远程连接<br><strong>git remote -v</strong></p>\n<p>git取消与远程仓库的连接<br><strong>git remote remove origin</strong></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck96nl3lp0000ba8cfnmu94x0","tag_id":"ck96nl3lv0003ba8c08388h7a","_id":"ck96nl3m6000cba8cb8qzfee6"},{"post_id":"ck96nl3lp0000ba8cfnmu94x0","tag_id":"ck96nl3m20007ba8cf36sg26c","_id":"ck96nl3m7000dba8cg6pt6vpt"},{"post_id":"ck96nl3lp0000ba8cfnmu94x0","tag_id":"ck96nl3m30008ba8cf6ch1ajz","_id":"ck96nl3m8000fba8c1kmc6qv5"},{"post_id":"ck96nl3lp0000ba8cfnmu94x0","tag_id":"ck96nl3m40009ba8c157m56ux","_id":"ck96nl3m8000gba8c2uyahia0"},{"post_id":"ck96nl3lp0000ba8cfnmu94x0","tag_id":"ck96nl3m5000aba8c9bg2c229","_id":"ck96nl3m9000iba8c736camfk"},{"post_id":"ck96nl3lw0004ba8c3fr4a8pr","tag_id":"ck96nl3m6000bba8c2nef1z49","_id":"ck96nl3m9000jba8ccuzyaoqf"},{"post_id":"ck96nl3m00005ba8ch9di78th","tag_id":"ck96nl3m6000bba8c2nef1z49","_id":"ck96nl3ma000kba8c0aixhgco"},{"post_id":"ck96nl3m20006ba8ch6nkgmsy","tag_id":"ck96nl3m8000hba8ce0ou9lw0","_id":"ck96nl3ma000lba8ch1cb48sh"}],"Tag":[{"name":"心情","_id":"ck96nl3lv0003ba8c08388h7a"},{"name":"Hexo","_id":"ck96nl3m20007ba8cf36sg26c"},{"name":"GitHub Page","_id":"ck96nl3m30008ba8cf6ch1ajz"},{"name":"Typora","_id":"ck96nl3m40009ba8c157m56ux"},{"name":"Blog","_id":"ck96nl3m5000aba8c9bg2c229"},{"name":"Vue","_id":"ck96nl3m6000bba8c2nef1z49"},{"name":"Git","_id":"ck96nl3m8000hba8ce0ou9lw0"}]}}